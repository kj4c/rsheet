# RSheets Mark Request

# Marked Questions

These questions are listed in the spec, and you must fill them out
to receive marks for the Design Questions.

## Question 1:
- This would be worse than the current implementation because it forces all the parsing to be done within lib.rs. this reduces the modularity and clarity.
we only want to handle the Get and Set commands in lib.rs, but adding an additional parsing step makes it harder to maintain and understand.

- This is worse.FromStr is the idiomatic way in Rust to convert a string, this allows you to integrate other standard library methods like
.parse(), Writing a separate parse function would make the code messier and less consistent with Rust conventions, making it harder for new users to understand.

- It is worse becasue it's more complex. It could be good if we were to extend the commands with more fields but for this assignment
the fields are set and dont change. By having it in the Command enum it makes it more efficient and concise which makes it easier topattern match.

## Question 2:
- there is repetition, making the cell key, getting the value, pushing to the variables and the incrementing of either the row or col.
it could be better by abstracting these steps into a helper function and having boolean variables to indicate if the incremting should be for the row, col.
We have to separate the scalar variables from the vector and matrix variables as there is afor loop involved and i only ever check for vector/matrix
variables if the cell contained a "_" within the name and using the same functinos for scaler variables would nto make sense.

- i would need to add one loop to iterate over the list of matrices, and each matrix's rows and columns can be called
similarily to how i am currently doing it, thereforfe i would abstract my logic for matrix calculations into a separate helper function so i can use it within Matrix list.

## Question 3:
let lock = state_clone.lock().unwrap();
this locks a mutex to protect the state_clone which has the spreadsheet data, multiple threads could concurrently mutate
or read the spreadsheet and lead to data races and inconsistent reads. rust's makes it so that only one thread can access the data at a time
and the lock will be released when the scope is exited. therefore, prevneting situations where multiple threads modify the shared state.

s.spawn(move || {
this line spawns a new thread within the scope and this ensures that the spawned thread completes before the program exits. Rust makes sure
that the closure has the ownershpi managed and that there will be no life time issues which can result in double-frees, dangling  references or race-conditions.
rusts enforces strict ownership and borrowing rules so only one thread owns the data at a time.

## Question 4:
To solve this edge case, i have a timestamp_map which basically amps each cell  to the most recent timestamp update.
let mut timestamp_lock = timestamp_map_clone.write().unwrap();
if let Some(last_update_time) = timestamp_lock.get(&cell_string) {
    if *last_update_time > update_timestamp {
        // if the last time u updated is more recent so don't perfrom this
        continue;
    }
}
so what this does is that after calculating the formula (and performing sleep) if it checks that another threadtried to access this cell and has a time stamp that is
later than the current timestamp, it would not continue with inserting the new value into the spreadsheet as it was a previous command. This prevents the edge case 
as a newer set command can never be overwritten by an older set command

## Question 5:
first, the spreadsheet sets a1 to 5. then when i set b1 to refer to a1, b1 becomes 5 too. at that point, 
i keep track of the fact that b1 depends on a1, so if a1 ever changes, i’ll need to update b1 by using a HashSet depends_on and depends_by. 
i do this by adding a1 to b1’s list of things it depends on, and also adding b1 to a1’s list of things that depend on it.

next, i set c1 to refer to b1, so c1 becomes 5 as well. again, i update the dependency tracking: c1 depends on b1, and b1 has c1 listed as something that depends on it.

then later, when a1 is changed to 7, i check what depends on a1. i find b1, so i update b1.
then i check what depends on b1, which is c1, so i update c1 as well.
this way, whenevr a value changes everything that depends on that value will be updated in a recursive manner.

# Questions to the Marker (OPTIONAL)

Remember: you don't have to fill these out; but if
you want to get feedback on a particular element of
your code; you can!

1.

2.

3.
